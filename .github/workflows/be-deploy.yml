name: be deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        default: 'dev'
        type: environment
  push:
    branches:
      - dev
      - stg
      - prod

jobs:
  setup:
    name: Setup environment
    runs-on: ubuntu-24.04
    outputs:
      deploy_env: ${{ steps.set-env.outputs.deploy_env }}
    steps:
      - name: Set deploy environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_ENV=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: deploy
    runs-on: ubuntu-24.04
    needs: setup
    environment: ${{ needs.setup.outputs.deploy_env }}
    env:
      DEPLOY_ENV: ${{ needs.setup.outputs.deploy_env }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '22.13.0'
      - name: Install node dependencies
        run: |
          npm ci
          npm install -g serverless

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create .env file
        run: |
          touch .env
          echo INTAKEQ_BASE_URL=${{ vars.INTAKEQ_BASE_URL }} >> .env
          echo INTAKEQ_AUTH_KEY=${{ secrets.INTAKEQ_AUTH_KEY }} >> .env
          echo INTAKEQ_SIGNUP_FORM=${{ vars.INTAKEQ_SIGNUP_FORM }} >> .env
          echo AIRTABLE_API_KEY=${{ secrets.AIRTABLE_API_KEY }} >> .env
          echo GOOGLE_CALENDAR_CREDENTIALS=${{ secrets.GOOGLE_CALENDAR_CREDENTIALS }} >> .env
          echo IS_AWS=true >> .env
          echo RDS_HOST=${{ secrets.RDS_HOST }} >> .env
          echo RDS_PORT=${{ secrets.RDS_PORT }} >> .env
          echo RDS_DATABASE=${{ secrets.RDS_DATABASE }} >> .env
          echo RDS_USER=${{ secrets.RDS_USER }} >> .env
          echo ANALYTICS_MEASUREMENT_ID=${{ secrets.ANALYTICS_MEASUREMENT_ID }} >> .env
          echo ANALYTICS_API_SECRET=${{ secrets.ANALYTICS_API_SECRET }} >> .env
          echo AIRTABLE_BASE_ID=${{ secrets.AIRTABLE_BASE_ID }} >> .env
          echo AIRTABLE_TABLE_ID=${{ secrets.AIRTABLE_TABLE_ID }} >> .env
          echo TEST_WELCOME_VIDEO=${{ vars.TEST_WELCOME_VIDEO }} >> .env
          echo TEST_GREETINGS_VIDEO=${{ vars.TEST_GREETINGS_VIDEO }} >> .env
          cat .env

      - name: Generate Python class from JSON
        env:
          TYPEFORM_IDS: ${{ vars.TYPEFORM_IDS }}
        run: |
          echo "Generating Python class..."
      
          # Creating Python-script for class generation
          cat <<EOF > generate_class.py
          import json
          import os
      
          # Static class generation
          json_data = '''$TYPEFORM_IDS'''
          data = json.loads(json_data)
      
          class_content = "class TypeformIds:\\n"
          for key, value in data.items():
              class_content += f"    {key.upper()} = \\"{value}\\"\\n"
      
          # Creating dir, if if doesn't exist
          os.makedirs("src/utils/typeform", exist_ok=True)
      
          # Saving class to file
          with open("src/utils/typeform/typeform_ids.py", "w") as f:
              f.write(class_content)
          EOF
      
          # Running script
          python generate_class.py
      
          # Checking
          cat src/utils/typeform/typeform_ids.py

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install python dependencies
        run: uv sync

      - name: Check Python version # checking the python version to see if 3.x is installed.
        run: python --version

      - name: Install Plugin and deploy
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          RDS_NAME: ${{ secrets.RDS_DATABASE }}
          RDS_MASTER_USERNAME: ${{ secrets.RDS_USER }}
          RDS_MASTER_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
          CERTIFICATE_NAME: ${{ vars.CERTIFICATE_NAME }}
          HOSTED_ZONE_ID: ${{ vars.HOSTED_ZONE_ID }}
          AURORA_DSQL_ARN: ${{ vars.AURORA_DSQL_ARN }}
        run: |
          serverless create-cert && serverless create_domain && serverless deploy --stage ${{ env.DEPLOY_ENV }}

      - name: Run Database Migration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws lambda invoke \
            --function-name SolHealth-BE-dev-migrate \
            --region us-east-2 \
            --payload '{}' \
            --cli-binary-format raw-in-base64-out \
            response.json
          cat response.json