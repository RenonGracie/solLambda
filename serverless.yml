# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: smileev
# "service" is the name of this project. This will also be added to your AWS resource names.
service: SolHealth-BE

custom:
  wsgi:
    app: app.app
  dotenv:
    logging: false
  pythonRequirements:
    noDeploy:
      - pip
      - bin
      - pytest
  customDomain:
    domainName: ${env:DOMAIN_NAME}
    createRoute53Record: true
    createRoute53IPv6Record: true
    certificateName: ${env:CERTIFICATE_NAME}
    apiType: rest
    autoDomain: true
  customCertificate:
    hostedZoneIds: ${env:HOSTED_ZONE_ID}
    certificateName: ${env:CERTIFICATE_NAME}
    region: us-east-1
    subjectAlternativeNames:
      - ${env:DOMAIN_NAME}

provider:
  name: aws
  runtime: python3.12
  region: us-east-2
  architecture: x86_64
  timeout: 30
  iam:
    role:
      statements:
        # Allow functions to read/write objects in a bucket
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::therapists-personal-data/*'

package:
  exclude:
    - node_modules/**
    - .venv/**
    - .github/**
    - .idea/**
    - tests/**
    - .ruff_cache/**

functions:
  api:
    handler: wsgi_handler.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
  migrate:
    handler: migrate.handler
    timeout: 15


resources:
  Resources:
    RDSCluster:
      Type: 'AWS::RDS::DBCluster'
      Properties:
        MasterUsername: ${env:RDS_MASTER_USERNAME}
        MasterUserPassword: ${env:RDS_MASTER_PASSWORD}
        DatabaseName: ${env:RDS_NAME}
        Engine: aurora-postgresql
        EngineMode: provisioned
        EnableHttpEndpoint: false
        ScalingConfiguration:
          AutoPause: true
          MaxCapacity: 1
          MinCapacity: 2
          SecondsUntilAutoPause: 300
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-certificate-creator
