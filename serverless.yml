# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: smileev
# "service" is the name of this project. This will also be added to your AWS resource names.
service: SolHealth-BE

custom:
  wsgi:
    app: app.app
  dotenv:
    logging: false
  pythonRequirements:
    noDeploy:
      - pip
      - bin
      - pytest
  customDomain:
    domainName: ${env:DOMAIN_NAME}
    createRoute53Record: true
    createRoute53IPv6Record: true
    certificateName: ${env:CERTIFICATE_NAME}
    apiType: rest
    autoDomain: true
  customCertificate:
    hostedZoneIds: ${env:HOSTED_ZONE_ID}
    certificateName: ${env:CERTIFICATE_NAME}
    region: us-east-1
    subjectAlternativeNames:
      - ${env:DOMAIN_NAME}

provider:
  name: aws
  runtime: python3.12
  region: us-east-2
  architecture: x86_64
  timeout: 30
  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
  iam:
    role:
      statements:
        # Allow functions to read/write objects in a bucket
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::therapists-personal-data/*'
        - Effect: Allow
          Action:
            - 'rds-data:*'
            - 'rds:Describe*'
          Resource:
            Fn::Join:
              - ''
              - - 'arn:aws:rds:'
                - ${aws:region}
                - ':'
                - ${aws:accountId}
                - ':cluster:'
                - Ref: RDSCluster

package:
  exclude:
    - node_modules/**
    - .venv/**
    - .github/**
    - .idea/**
    - tests/**
    - .ruff_cache/**

functions:
  api:
    handler: wsgi_handler.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
  migrate:
    handler: migrate.handler
    timeout: 15


resources:
  Resources:
    AuroraVPC:
      Type: "AWS::EC2::VPC"
      Properties:
        CidrBlock: "10.0.0.0/16"
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: "Name"
            Value: "AuroraVPC"

      PrivateSubnet1:
        Type: "AWS::EC2::Subnet"
        Properties:
          VpcId: !Ref AuroraVPC
          CidrBlock: "10.0.1.0/24"
          AvailabilityZone: !Select [ 0, !GetAZs "" ]
          MapPublicIpOnLaunch: false

      PrivateSubnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
          VpcId: !Ref AuroraVPC
          CidrBlock: "10.0.2.0/24"
          AvailabilityZone: !Select [ 1, !GetAZs "" ]
          MapPublicIpOnLaunch: false

      DBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
          DBSubnetGroupDescription: "Subnet group for Aurora Serverless v2"
          SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2

      DBSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
          GroupDescription: "Allow inbound access from Lambda to Aurora"
          VpcId: !Ref AuroraVPC
          SecurityGroupIngress:
            - IpProtocol: "tcp"
              FromPort: 5432
              ToPort: 5432
              SourceSecurityGroupId: !Ref LambdaSecurityGroup

      LambdaSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
          GroupDescription: "Security Group for Lambda functions"
          VpcId: !Ref AuroraVPC

    AuroraPostgresCluster:
      Type: 'AWS::RDS::DBCluster'
      Properties:
        MasterUsername: ${env:RDS_MASTER_USERNAME}
        MasterUserPassword: ${env:RDS_MASTER_PASSWORD}
        DatabaseName: ${env:RDS_NAME}
        EngineMode: provisioned
        EnableHttpEndpoint: true
        ServerlessV2ScalingConfiguration:
          MinCapacity: 0
          MaxCapacity: 2
          SecondsUntilAutoPause: 180

    AuroraPostgresInstance:
      Type: "AWS::RDS::DBInstance"
      Properties:
        DBClusterIdentifier: !Ref AuroraPostgresCluster
        DBInstanceClass: "db.serverless"
        Engine: "aurora-postgresql"
        PubliclyAccessible: false

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

  Outputs:
    AuroraDBEndpoint:
      Description: "Aurora PostgreSQL Serverless v2 Cluster Endpoint"
      Value: !GetAtt AuroraPostgresCluster.Endpoint.Address

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-certificate-creator
